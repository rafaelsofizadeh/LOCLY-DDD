import { IDraftOrder, DraftOrderRequest } from './application/DraftOrder/IDraftOrder';
import { ConfirmOrderRequest, IConfirmOrder, ConfirmOrderResult } from './application/ConfirmOrder/IConfirmOrder';
import { ReceiveItemResult, IReceiveItem, ReceiveItemRequest } from './application/ReceiveItem/IReceiveItem';
import { DraftedOrder } from './entity/Order';
import { IEditOrder, EditOrderRequest } from './application/EditOrder/IEditOrder';
import { DeleteOrderRequest, DeleteOrderResult, IDeleteOrder } from './application/DeleteOrder/IDeleteOrder';
import { AddItemPhotoRequest, IAddItemPhotos } from './application/AddItemPhotos/IAddItemPhotos';
import { FileUpload } from './persistence/OrderMongoMapper';
import { SubmitShipmentInfoRequest, SubmitShipmentInfoResult, ISubmitShipmentInfo } from './application/SubmitShipmentInfo/ISubmitShipmentInfo';
import { IPayShipment, PayShipmentRequest, PayShipmentResult } from './application/PayShipment/IPayShipment';
import { UUID } from '../common/domain';
import { Host } from '../host/entity/Host';
import { GetOrderResult, IGetOrder } from './application/GetOrder/IGetOrder';
import { EstimateShipmentCostRequest } from './application/EstimateShipmentCost/IEstimateShipmentCost';
import { ShipmentCostQuote } from '../calculator/getShipmentCostQuote';
import { GetItemPhotoResult, IGetItemPhoto } from './application/GetItemPhoto/IGetItemPhoto';
export declare class OrderController {
    private readonly getOrder;
    private readonly getItemPhoto;
    private readonly draftOrder;
    private readonly editOrder;
    private readonly deleteOrder;
    private readonly confirmOrder;
    private readonly receiveItem;
    private readonly addItemPhotos;
    private readonly submitShipmentInfo;
    private readonly payShipment;
    constructor(getOrder: IGetOrder, getItemPhoto: IGetItemPhoto, draftOrder: IDraftOrder, editOrder: IEditOrder, deleteOrder: IDeleteOrder, confirmOrder: IConfirmOrder, receiveItem: IReceiveItem, addItemPhotos: IAddItemPhotos, submitShipmentInfo: ISubmitShipmentInfo, payShipment: IPayShipment);
    estimateShipmentCostHandler({ originCountry, destinationCountry, totalWeight, }: EstimateShipmentCostRequest, identity: any): ShipmentCostQuote;
    getOrderHandler(orderId: UUID, entity: Host | UUID): Promise<GetOrderResult>;
    draftOrderHandler(unidDraftOrderRequest: DraftOrderRequest, customerId: UUID): Promise<DraftedOrder>;
    editOrderHandler(unidEditOrderRequest: EditOrderRequest, customerId: UUID): Promise<DraftedOrder>;
    deleteOrderHandler(unidDeleteOrderRequest: DeleteOrderRequest, customerId: UUID): Promise<DeleteOrderResult>;
    confirmOrderHandler(unidConfirmaOrderRequest: ConfirmOrderRequest, customerId: UUID): Promise<ConfirmOrderResult>;
    receiveItemHandler(unidReceiveItemRequest: ReceiveItemRequest, { id: hostId }: Host): Promise<ReceiveItemResult>;
    addItemPhotoHandler(unidAddItemPhotoRequest: Record<keyof AddItemPhotoRequest, string>, photos: FileUpload[], { id: hostId }: Host): Promise<import("./application/AddItemPhotos/IAddItemPhotos").AddItemPhotosResult>;
    getItemPhotoHandler(orderId: UUID, itemId: UUID, photoId: UUID, entity: Host | UUID): Promise<GetItemPhotoResult>;
    submitShipmentInfoHandler(unidSubmitShipmentInfoRequestJson: Record<keyof SubmitShipmentInfoRequest, string>, proofOfPayment: FileUpload, { id: hostId }: Host): Promise<SubmitShipmentInfoResult>;
    payShipmentHandler(unidPayShipmentRequest: PayShipmentRequest, customerId: UUID): Promise<PayShipmentResult>;
}
